/* Copyright (c) Facebook, Inc. and its affiliates. All rights reserved.
 *
 * This source code is licensed under the Apache 2.0 license found in
 * the LICENSE file in the root directory of this source tree.
 */

apply plugin: 'maven-publish'
apply plugin: 'signing'

version = LIBRARY_VERSION_NAME
group = GROUP

def isReleaseBuild() {
    return LIBRARY_VERSION_NAME.contains("SNAPSHOT") == false
}

def getMavenRepositoryUrl() {
    return hasProperty('repositoryUrl') ? property('repositoryUrl') : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
}

def getMavenRepositoryUsername() {
    return hasProperty('repositoryUsername') ? property('repositoryUsername') : ""
}

def getMavenRepositoryPassword() {
    return hasProperty('repositoryPassword') ? property('repositoryPassword') : ""
}

afterEvaluate { project ->
    task androidJavadoc(type: Javadoc) {
        source = android.sourceSets.main.java.source
        classpath += files(android.getBootClasspath().join(File.pathSeparator))
        if (JavaVersion.current().isJava8Compatible()) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
        if (JavaVersion.current().isJava9Compatible()) {
            options.addBooleanOption('html5', true)
        }
    }

    task androidJavadocJar(type: Jar, dependsOn: androidJavadoc) {
        classifier = 'javadoc'
        from androidJavadoc.destinationDir
    }

    task androidSourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.source
    }

    artifacts {
        archives androidSourcesJar
        archives androidJavadocJar
    }

    android.libraryVariants.all { variant ->
        tasks.androidJavadoc.doFirst {
            classpath += files(variant.javaCompileProvider.get().classpath.files.join(File.pathSeparator))
        }
        def name = variant.name.capitalize()
        task "jar${name}"(type: Jar, dependsOn: variant.javaCompileProvider) {
            from variant.javaCompileProvider.get().destinationDir
        }
    }

    def releaseVariant
    android.libraryVariants.all { variant ->
        if (variant.buildType.name == 'release') {
            releaseVariant = variant.name
        }
    }

    publishing {
        publications {
            mavenRelease(MavenPublication) {
                groupId GROUP
                artifactId POM_ARTIFACT_ID
                version LIBRARY_VERSION_NAME

                from components[releaseVariant]

                artifact androidJavadocJar
                artifact androidSourcesJar

                pom {
                    name = POM_NAME
                    description = POM_DESCRIPTION
                    url = POM_URL

                    scm {
                        url = POM_SCM_URL
                        connection = POM_SCM_CONNECTION
                        developerConnection = POM_SCM_DEV_CONNECTION
                    }

                    licenses {
                        license {
                            name = POM_LICENSE_NAME
                            url = POM_LICENSE_URL
                            distribution = POM_LICENSE_DIST
                        }
                    }

                    developers {
                        developer {
                            id = POM_DEVELOPER_ID
                            name = POM_DEVELOPER_NAME
                        }
                    }
                }
            }
        }

        repositories {
            maven {
                url getMavenRepositoryUrl()
                credentials(PasswordCredentials) {
                    username = getMavenRepositoryUsername()
                    password = getMavenRepositoryPassword()
                }
            }
        }
    }

    signing {
        required { isReleaseBuild() }
        publishing.publications.all { publication ->
            sign publication
        }
    }
}